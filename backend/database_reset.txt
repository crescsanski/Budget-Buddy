/* RUNNING THIS FILES DELETES ALL TABLES AND REINSTERTS THEM */
/* THEN IT CREATES PROCEDURES AND CALLS THEM TO FILL TABLES */


/* Drop All Tables in Database */
CREATE OR REPLACE PROCEDURE drop_all_tables()
LANGUAGE SQL
AS $$
DROP TABLE IF EXISTS budgetBuddy.global_competitions;
DROP TABLE IF EXISTS budgetBuddy.competitions;
DROP TABLE IF EXISTS budgetBuddy.competition_status;
DROP TABLE IF EXISTS budgetBuddy.friends;
DROP TABLE IF EXISTS budgetBuddy.friend_status;
DROP TABLE IF EXISTS budgetBuddy.widget_inventory;
DROP TABLE IF EXISTS budgetBuddy.widget;
DROP TABLE IF EXISTS budgetBuddy.notifications_list;
DROP TABLE IF EXISTS budgetBuddy.notifications;
DROP TABLE IF EXISTS budgetBuddy.user_category_budgets;
DROP TABLE IF EXISTS budgetBuddy.user_budget_goal;
DROP TABLE IF EXISTS budgetBuddy.budget;
DROP TABLE IF EXISTS budgetBuddy.income;
DROP TABLE IF EXISTS budgetBuddy.product;
DROP TABLE IF EXISTS budgetBuddy.category;
DROP TABLE IF EXISTS budgetBuddy.receipt;
DROP TABLE IF EXISTS budgetBuddy.levels;
DROP TABLE IF EXISTS budgetBuddy.challenge_inventory;
DROP TABLE IF EXISTS budgetBuddy.challenge;
DROP TABLE IF EXISTS budgetBuddy.trigger;
DROP TABLE IF EXISTS budgetBuddy.inventory;
DROP TABLE IF EXISTS budgetBuddy.items;
DROP TABLE IF EXISTS budgetBuddy.difficulty;
DROP TABLE IF EXISTS budgetBuddy.users;
DROP TABLE IF EXISTS budgetBuddy.security_question;
$$;


/* Drop All Tables in Database */
CALL drop_all_tables();


/* Create All Tables in Database */
CREATE OR REPLACE PROCEDURE create_all_tables()
LANGUAGE SQL
AS $$
CREATE TABLE IF NOT EXISTS budgetBuddy.security_question(
	security_question_id SERIAL,
    	security_question_name VARCHAR(255) NOT NULL,
	security_question_question VARCHAR(255) NOT NULL,
	PRIMARY KEY (security_question_id) 
);
CREATE TABLE IF NOT EXISTS budgetBuddy.users(
	user_id SERIAL,
	email VARCHAR(255) UNIQUE NOT NULL,
	pass VARCHAR(255) NOT NULL,
	security_question_id INT,
	security_answer VARCHAR(255) NOT NULL,	
	first_name VARCHAR(255),
	last_name VARCHAR(255),
	user_name VARCHAR(255) UNIQUE NOT NULL,
	phone_number VARCHAR(14) UNIQUE,
	registered DATE NOT NULL,	
	birth_date DATE NOT NULL,
	notifications BOOLEAN NOT NULL,
	user_exp INT,
	PRIMARY KEY (user_id),
	CONSTRAINT fk_userssecurityquestion FOREIGN KEY(security_question_id) REFERENCES budgetBuddy.security_question(security_question_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.difficulty(
	difficulty_id SERIAL,
    	difficulty_name VARCHAR(255) NOT NULL,
	difficulty_description VARCHAR(255) NOT NULL,
	PRIMARY KEY (difficulty_id) 
);
CREATE TABLE IF NOT EXISTS budgetBuddy.items(
	item_id SERIAL,
	item_name VARCHAR(255) NOT NULL,
	item_description VARCHAR(255) NOT NULL,
	item_type VARCHAR(255) NOT NULL,	
	item_link VARCHAR(255) NOT NULL,
	difficulty_id INT,
	unlock_level INT,
	PRIMARY KEY (item_id),
	CONSTRAINT fk_itemsdifficulty FOREIGN KEY(difficulty_id) REFERENCES budgetBuddy.difficulty(difficulty_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.inventory(
	inventory_id SERIAL,
	equipped BOOLEAN NOT NULL,
	item_id INT,
	user_id INT,
	PRIMARY KEY (inventory_id),
	CONSTRAINT fk_inventoryitems FOREIGN KEY(item_id) REFERENCES budgetBuddy.items(item_id),
	CONSTRAINT fk_inventoryuser FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id)	
);
CREATE TABLE IF NOT EXISTS budgetBuddy.trigger(
	trigger_id SERIAL,
	trigger_names VARCHAR(255),    	
	PRIMARY KEY (trigger_id) 
);
CREATE TABLE IF NOT EXISTS budgetBuddy.challenge(
	challenge_id SERIAL,
    	challenge_name VARCHAR(255) NOT NULL,
	challenge_description VARCHAR(255) NOT NULL,
	challenge_type VARCHAR(255) NOT NULL,		
	challenge_time_given INT NOT NULL,
	challenge_repeatable BOOLEAN NOT NULL,
	active BOOLEAN NOT NULL,
	experience INT,
	item_id INT,	
	difficulty_id INT,
	trigger_id INT,
	minimum INT,
	maximum INT,
	PRIMARY KEY (challenge_id),
	CONSTRAINT fk_challengeitems FOREIGN KEY(item_id) REFERENCES budgetBuddy.items(item_id),
	CONSTRAINT fk_challengedifficulty FOREIGN KEY(difficulty_id) REFERENCES budgetBuddy.difficulty(difficulty_id),
	CONSTRAINT fk_challengetrigger FOREIGN KEY(trigger_id) REFERENCES budgetBuddy.trigger(trigger_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.challenge_inventory(
	challenge_inventory_id SERIAL,	
	challenge_start_date DATE NOT NULL,
	challenge_completion TIMESTAMP,
	challenge_id INT,
	status INT,
	user_id INT,
	PRIMARY KEY (challenge_inventory_id),
	CONSTRAINT fk_challengeinventorychallenge FOREIGN KEY(challenge_id) REFERENCES budgetBuddy.challenge(challenge_id),
	CONSTRAINT fk_challengeinventoryuser FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.levels(
	level_id SERIAL,	
	level_number INT NOT NULL,
	level_exp INT NOT NULL,	
	item_id INT,
	challenge_id INT,
	PRIMARY KEY (level_id),
	CONSTRAINT fk_levelsitem FOREIGN KEY(item_id) REFERENCES budgetBuddy.items(item_id),
	CONSTRAINT fk_levelschallenge FOREIGN KEY(challenge_id) REFERENCES budgetBuddy.challenge(challenge_id)	
);
CREATE TABLE IF NOT EXISTS budgetBuddy.receipt(
	receipt_id SERIAL,
    	receipt_amount DECIMAL(10,2),
	receipt_date TIMESTAMP NOT NULL,		
	reccuring INT NOT NULL,
	income BOOLEAN NOT NULL,
	user_id INT,
	PRIMARY KEY (receipt_id),
	CONSTRAINT fk_receiptusers FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.category(
	category_id SERIAL,
    	category_name VARCHAR(255) NOT NULL,	
	category_description VARCHAR(255) NOT NULL,
	category_income BOOLEAN NOT NULL,
	PRIMARY KEY (category_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.product(
	product_id SERIAL,
    	product_name VARCHAR(255) NOT NULL,
	product_price DECIMAL(10,2) NOT NULL,
	receipt_id INT,
	category_id INT,
	essential_BOOLEAN,
	PRIMARY KEY (product_id),	
	CONSTRAINT fk_productreceipt FOREIGN KEY(receipt_id) REFERENCES budgetBuddy.receipt(receipt_id),
	CONSTRAINT fk_productcategory FOREIGN KEY(category_id) REFERENCES budgetBuddy.category(category_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.income(
	income_id SERIAL,
	income_name VARCHAR(255) NOT NULL,
    	income_amount DECIMAL(10,2) NOT NULL,
	receipt_id INT,
	category_id INT,
	PRIMARY KEY (income_id),
	CONSTRAINT fk_incomereceipt FOREIGN KEY(receipt_id) REFERENCES budgetBuddy.receipt(receipt_id),
	CONSTRAINT fk_incomecategory FOREIGN KEY(category_id) REFERENCES budgetBuddy.category(category_id)		
);
CREATE TABLE IF NOT EXISTS budgetBuddy.budget(
	budget_id SERIAL,
	user_id INT,	
	category_id INT,
	estimated_amount INT,
	last_modified_date TIMESTAMP,	
	PRIMARY KEY (budget_id),		
	CONSTRAINT fk_budgetusers FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id),
	CONSTRAINT fk_budgetcategory FOREIGN KEY(category_id) REFERENCES budgetBuddy.category(category_id)		
);
CREATE TABLE IF NOT EXISTS budgetBuddy.user_budget_goal(
	goal_id SERIAL,
	user_id INT,
	goal_amount INT,
	CONSTRAINT fk_userbudgetcategory FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id),
	PRIMARY KEY (goal_id) 
);
CREATE TABLE IF NOT EXISTS budgetBuddy.notifications(
	notification_id SERIAL,
    	notification_name VARCHAR(255) NOT NULL,
	notification_message VARCHAR(255) NOT NULL,
	PRIMARY KEY (notification_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.notifications_list(
	notification_list_id SERIAL,    		
	notification_time TIMESTAMP,
	user_id INT,
	notification_id INT,
	PRIMARY KEY (notification_list_id),
	CONSTRAINT fk_notificationslistusers FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id),
	CONSTRAINT fk_notificationslistnotifications FOREIGN KEY(notification_id) REFERENCES budgetBuddy.notifications(notification_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.widget(
	widget_id SERIAL,
   	widget_name VARCHAR(255) NOT NULL,
	widget_description VARCHAR(255) NOT NULL, 
	widget_link VARCHAR(255) NOT NULL,
	PRIMARY KEY (widget_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.widget_inventory(
	widget_inventory_id SERIAL,
	widget_position INT,
	widget_id INT,
	user_id INT,
	PRIMARY KEY (widget_inventory_id),
	CONSTRAINT fk_widgetinventorywidget FOREIGN KEY(widget_id) REFERENCES budgetBuddy.widget(widget_id),
	CONSTRAINT fk_widgetinventoryusers FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.friend_status(
	friend_status_id SERIAL,
	friend_status_type VARCHAR(20) NOT NULL,
	PRIMARY KEY (friend_status_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.friends(
	friend_id SERIAL,	
	user_2_id INT NOT NULL,
	user_id INT,
	friend_status_id INT,	
	PRIMARY KEY (friend_id),
	CONSTRAINT fk_friendsusers FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id),
	CONSTRAINT fk_friendsfriendstatus FOREIGN KEY(friend_status_id) REFERENCES budgetBuddy.friend_status(friend_status_id),
	CONSTRAINT uq_friendsonce UNIQUE(user_id, user_2_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.competition_status(
	competition_status_id SERIAL,
	competition_status_type VARCHAR(20) NOT NULL,
	PRIMARY KEY (competition_status_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.competitions(
	competition_id SERIAL,
	competition_type VARCHAR (255),	
	user_2_id INT NOT NULL,
	competition_start_date DATE NOT NULL,	
	competition_winner INT,	
	user_id INT,
	competition_status_id INT,
	PRIMARY KEY (competition_id),
	CONSTRAINT fk_competitionsusers FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id),
	CONSTRAINT fk_competitionscompetitionstatus FOREIGN KEY(competition_status_id) REFERENCES budgetBuddy.competition_status(competition_status_id),
	CONSTRAINT uq_competitionsonce UNIQUE(user_id, user_2_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.global_competitions(
	global_competition_id SERIAL,
	global_competition_type VARCHAR(255),	
	budget_percent_goal DECIMAL(10,2),
	ranking INT NOT NULL,
	competition_start_date DATE NOT NULL,
	competition_winner INT,
	user_id INT,
	PRIMARY KEY (global_competition_id),
	CONSTRAINT fk_globalcompetitionsusers FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id)
);
$$;


/* Create All Tables in Database */
CALL create_all_tables();

/* Insert new security question */
CREATE OR REPLACE PROCEDURE insert_new_security_question(security_question_name VARCHAR, security_question_question VARCHAR)
LANGUAGE SQL
AS $$
INSERT INTO budgetBuddy.security_question(security_question_name, security_question_question) 
VALUES (security_question_name, security_question_question);
$$;


/* Fill security questions */
CREATE OR REPLACE PROCEDURE insert_security_questions()
LANGUAGE SQL
AS $$
INSERT INTO budgetBuddy.security_question(security_question_name, security_question_question) 
VALUES ('nickname', 'What was your childhood nickname?'),('friend','What is the name of your favorite childhood friend?'),
('street','What street did you live on in third grade?'),('middle','What is your oldest sibling''s middle name?'),
('school','What school did you attend for sixth grade?'),('cousin','What is your oldest cousin''s first and last name?'),
('toy','What was the name of your favorite toy growing up?'),('city','In what city or town did your mother and father meet?'),
('kiss','What is the first name of your first kiss?'),('teacher','What was the last name of your third grade teacher?'),
('number','What is the number of your nearest sibling''s address?'),('grandmother','What is your maternal grandmother''s maiden name?'),
('job','In what city or town was your first job?'),('college','What was the name of your first choice college?');
$$;


/* Fill security question table */
CALL insert_security_questions();


/* Insert a new user */
CREATE OR REPLACE PROCEDURE insert_new_user(email VARCHAR, pass VARCHAR, security_question_id INT, security_answer VARCHAR,
 first_name VARCHAR, last_name VARCHAR, user_name VARCHAR, phone_number VARCHAR, registered DATE, birth_date DATE,
notifications BOOLEAN, user_exp INT)
LANGUAGE SQL
AS $$
INSERT INTO budgetBuddy.users(email, pass, security_question_id, security_answer, 
first_name, last_name, user_name, phone_number, registered, birth_date, notifications, user_exp) 
VALUES (email, pass, security_question_id, security_answer, 
first_name, last_name, user_name, phone_number, registered, birth_date, notifications, user_exp);
$$;


/* Fill Users table  */
CREATE OR REPLACE PROCEDURE insert_users(numbers integer)
LANGUAGE plpgsql
AS $$
declare 
   counter integer := 1;
begin
   while counter <= numbers loop
	INSERT INTO budgetBuddy.users(email, pass, security_question_id, security_answer, 
first_name, last_name, user_name, phone_number, registered, birth_date, notifications,user_exp) 
	VALUES (CONCAT('tester',CAST(counter as VarChar),'@testmail.com'), CONCAT('password',CAST(counter as VarChar)), 
floor(random() * (SELECT COUNT(*) FROM budgetBuddy.security_question) + 1)::int,CONCAT('answer',CAST(counter as VarChar)),
CONCAT('fname',CAST(counter as VarChar)),CONCAT('lname',CAST(counter as VarChar)),CONCAT('username',CAST(counter as VarChar)),
CAST(counter as VarChar),'2021-01-01', '2021-01-01',
CAST(floor(random() * 1.99)::int as BOOLEAN),0);
	counter := counter + 1;
   end loop;
end$$;


/* Fill Users Table */
CALL insert_users(50);


/* Insert new category (BOOLEAN use 0,1 true,false)*/
CREATE OR REPLACE PROCEDURE insert_new_category(category_name VARCHAR, category_description VARCHAR, category_income BOOLEAN)
LANGUAGE SQL
AS $$
INSERT INTO budgetBuddy.category(category_name, category_description, category_income) 
VALUES (category_name, category_description,category_income);
$$;


/* Fill categories */
CREATE OR REPLACE PROCEDURE insert_categories()
LANGUAGE SQL
AS $$
INSERT INTO budgetBuddy.category(category_name, category_description,category_income) 
VALUES ('Housing','Property insurance, rent, mortgage payments, property taxes, home maintenance costs, ect.',false),
('Transportation','Auto insurance, vehicle payments, DMV fees, gas, tolls, parking, public transit, vehicle maintenance, ect.',false),
('Essential Groceries','Grocery items considered essential',false),
('Non-Essential Groceries','Grocery items considered non-essential ex: alcohol',false),
('Utilities','Water, electricity, HVAC, gas, phone, cable/internet, ect.',false),
('Insurance','Life insurance, disability insurance, and other miscellaneous insurances.',false),
('Medical','Health insurance, out-of-pocket primary care costs, specialty care, dental care, urgent care, prescriptions, medical supplies/devices, ect.',false),
('Investment','401(k) retirement account, IRAs, ETFs, stocks, savings bonds, non-liquid assets, ect.',false),
('Restaurant','Diners, drive-ins, dives, fast food, restaurants, ect.',false),
('Entertainment','Sporting events, concert tickets, vacation expenses, video games, movies, hobbies, ect.',false),
('Clothing','Shirts, blouses, pants, skirts, hats, jewlery, accessories, ect.',false),
('Gift','Presents for others.',false),
('Furnishings','Home decor, furniture, fittings, decorative accessories, curtains, carpets, ect.',false),
('Pet','Ownership, food, treats, housing, medical expenses, and anything else pertaining to ones hairy, furry, scaly, or feathery friends.',false),
('Tax Payment','Government tax payment',false),
('Miscellaneous Expense','Expenses that do not fit in other categories.',false),
('Job Income','Wages or salary from ones job.',true),
('Received Gift','Cash gift from another person.',true),
('Interest','Non-liquid funds made liquid, dividends, savings account interest, ect.',true),
('Government Payment','Assistance payments from the government.',true),
('Tax Refund','Government refund from taxes.',true),
('Miscellaneous Income','Incomes that do not fit in other categories.',true);
$$;


/* Fill Category table */
CALL insert_categories();



/* Fill Levels */
CREATE OR REPLACE PROCEDURE insert_levels()
LANGUAGE plpgsql
AS $$
declare 
   counter integer := 1;   
begin
   while counter <= 100 loop
	IF counter = 1 THEN
	INSERT INTO budgetBuddy.levels(level_number, level_exp) 
VALUES (counter,0);
	ELSE
	INSERT INTO budgetBuddy.levels(level_number, level_exp) 
VALUES (counter,((counter-1)*252));
END IF;
counter := counter + 1;
   end loop;
end$$;


/* Fill Levels table */
CALL insert_levels();



/* RECEIPT CREATION */

/* Create receipt first*/
CREATE OR REPLACE PROCEDURE new_receipt(reccuring INT,toad VARCHAR)
LANGUAGE SQL
AS $$
INSERT INTO budgetBuddy.receipt(receipt_date, reccuring, income, user_id) 
VALUES (current_timestamp, reccuring, false, (SELECT user_id from
budgetBuddy.users WHERE user_name = toad));
$$;



/* Create product second*/
CREATE OR REPLACE PROCEDURE new_product(product_name VARCHAR, product_price DECIMAL,
toad VARCHAR, category_id INT)
LANGUAGE SQL
AS $$
INSERT INTO budgetBuddy.product(product_name, product_price, receipt_id, category_id) 
VALUES (product_name, product_price, (SELECT receipt_id FROM budgetBuddy.receipt 
									  WHERE user_id = (select user_id from
budgetBuddy.users where user_name = toad) order by receipt_date desc limit 1), category_id);
$$;



/* Total Products and Complete Receipt*/
CREATE OR REPLACE PROCEDURE complete_receipt(toad VARCHAR)
LANGUAGE SQL
AS $$
UPDATE budgetBuddy.receipt
SET receipt_amount = (SELECT SUM(product_price)
FROM budgetBuddy.product
INNER JOIN budgetBuddy.receipt ON budgetBuddy.receipt.receipt_id=budgetBuddy.product.receipt_id
INNER JOIN budgetBuddy.users ON budgetBuddy.users.user_id=budgetBuddy.receipt.user_id
WHERE budgetBuddy.product.receipt_id = (SELECT receipt_id FROM budgetBuddy.receipt 
WHERE user_id = (select user_id from budgetBuddy.users where user_name = toad) order by receipt_date desc limit 1))
WHERE receipt_id = (SELECT receipt_id FROM budgetBuddy.receipt WHERE user_id = (select user_id from
budgetBuddy.users where user_name = toad) order by receipt_date desc limit 1);
$$;



/* RANDOM RECEIPT INSERTION */

/* Creates Random Products */
CREATE OR REPLACE PROCEDURE fill_receipt_product_two()
LANGUAGE plpgsql
AS $$
declare 
   counter integer := 1;
   items integer := (select floor(random() * (5- 1 +1) + 1)::int);   
   highprice integer :=100;
   lowprice decimal :=.01;   
begin
   while counter <= items loop
	INSERT INTO budgetBuddy.product(product_name, product_price, receipt_id, category_id) 
VALUES (CONCAT('tester',CAST(counter as VarChar)), (SELECT round(CAST((random() * (highprice-lowprice + 1) + lowprice) AS decimal), 2)), 
(SELECT max(receipt_id) FROM budgetBuddy.receipt), 
floor(random() * (SELECT COUNT(*) FROM budgetBuddy.category) + 1)::int);
counter := counter + 1;
   end loop;
end$$;


/* Totals Random Products and Completes Random Receipt*/
CREATE OR REPLACE PROCEDURE fill_receipt_product_three()
LANGUAGE SQL
AS $$
UPDATE budgetBuddy.receipt
SET receipt_amount = (SELECT SUM(product_price)
FROM budgetBuddy.product WHERE receipt_id = (SELECT max(receipt_id) FROM budgetBuddy.product))
WHERE receipt_id = (SELECT max(receipt_id) FROM budgetBuddy.receipt);
$$;


/* Creates Random Receipts and Ties To Products*/
CREATE OR REPLACE PROCEDURE fill_receipt_product_one(numbers integer)
LANGUAGE plpgsql
AS $$
declare 
   counter integer := 1;      
begin
   while counter <= numbers loop	
	INSERT INTO budgetBuddy.receipt(receipt_date, reccuring, income,user_id) 
VALUES ((select (timestamp '1999-01-01' + random() * (timestamp '2021-11-16' - timestamp '1999-01-01'))),
0, false,(select floor(random() * (SELECT COUNT(*) FROM budgetBuddy.users) + 1)::int));
	call fill_receipt_product_two();
	call fill_receipt_product_three();
	counter := counter + 1;
   end loop;
end$$;


/* Creates Random Receipts and Products*/
CALL fill_receipt_product_one(100);
