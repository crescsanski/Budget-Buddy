# Generated by Django 3.2.7 on 2021-12-06 15:16

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BadgesEarned',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('challenge_name', models.CharField(max_length=255)),
                ('challenge_description', models.CharField(max_length=255)),
                ('challenge_completion', models.DateField()),
            ],
            options={
                'db_table': 'BadgesEarned',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='email address')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=14, null=True, unique=True)),
                ('password', models.CharField(max_length=255, null=True, unique=True)),
                ('registered', models.DateField(blank=True, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('user_level', models.IntegerField(blank=True, null=True)),
                ('user_exp', models.IntegerField(blank=True, null=True)),
                ('security_answer', models.CharField(blank=True, max_length=255, null=True)),
                ('notifications', models.BooleanField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'users',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('category_id', models.AutoField(primary_key=True, serialize=False)),
                ('category_name', models.CharField(max_length=255)),
                ('category_income', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('challenge_id', models.AutoField(primary_key=True, serialize=False)),
                ('challenge_name', models.CharField(max_length=255)),
                ('challenge_description', models.CharField(max_length=255)),
                ('challenge_type', models.CharField(max_length=255)),
                ('active', models.BooleanField(blank=True, null=True)),
                ('challenge_time_given', models.IntegerField(blank=True, null=True)),
                ('challenge_repeatable', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'challenge',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CompetitionStatus',
            fields=[
                ('competition_status_id', models.AutoField(primary_key=True, serialize=False)),
                ('competition_status_type', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'competition_status',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Difficulty',
            fields=[
                ('difficulty_id', models.AutoField(primary_key=True, serialize=False)),
                ('difficulty_name', models.CharField(max_length=255)),
                ('difficulty_description', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'difficulty',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FriendStatus',
            fields=[
                ('friend_status_id', models.AutoField(primary_key=True, serialize=False)),
                ('friend_status_type', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'friend_status',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('notification_id', models.AutoField(primary_key=True, serialize=False)),
                ('notification_name', models.CharField(max_length=255)),
                ('notification_message', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'notifications',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SecurityQuestion',
            fields=[
                ('security_question_id', models.AutoField(primary_key=True, serialize=False)),
                ('security_question_name', models.CharField(max_length=255)),
                ('security_question_question', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'security_question',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Widget',
            fields=[
                ('widget_id', models.AutoField(primary_key=True, serialize=False)),
                ('widget_name', models.CharField(max_length=255)),
                ('widget_description', models.CharField(max_length=255)),
                ('widget_link', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'widget',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WidgetInventory',
            fields=[
                ('widget_inventory_id', models.AutoField(primary_key=True, serialize=False)),
                ('widget_position', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('widget', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.widget')),
            ],
            options={
                'db_table': 'widget_inventory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('receipt_id', models.AutoField(primary_key=True, serialize=False)),
                ('receipt_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('receipt_date', models.DateField()),
                ('reoccuring', models.IntegerField(blank=True, null=True)),
                ('is_income', models.BooleanField(null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'receipt',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('product_id', models.AutoField(primary_key=True, serialize=False)),
                ('product_name', models.CharField(max_length=255)),
                ('product_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.category')),
                ('receipt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.receipt')),
            ],
            options={
                'db_table': 'product',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='NotificationsList',
            fields=[
                ('notification_list_id', models.AutoField(primary_key=True, serialize=False)),
                ('notification_time', models.DateTimeField(blank=True, null=True)),
                ('notification', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.notifications')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notifications_list',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Items',
            fields=[
                ('item_id', models.AutoField(primary_key=True, serialize=False)),
                ('item_name', models.CharField(max_length=255)),
                ('item_description', models.CharField(max_length=255)),
                ('item_type', models.CharField(max_length=255)),
                ('item_link', models.CharField(max_length=255)),
                ('difficulty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.difficulty')),
            ],
            options={
                'db_table': 'items',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('inventory_id', models.AutoField(primary_key=True, serialize=False)),
                ('equipped', models.BooleanField(blank=True, null=True)),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.items')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'inventory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Income',
            fields=[
                ('income_id', models.AutoField(primary_key=True, serialize=False)),
                ('income_name', models.CharField(max_length=255)),
                ('income_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.category')),
                ('receipt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.receipt')),
            ],
            options={
                'db_table': 'income',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GlobalCompetitions',
            fields=[
                ('global_competition_id', models.AutoField(primary_key=True, serialize=False)),
                ('global_competition_type', models.CharField(blank=True, max_length=255, null=True)),
                ('budget_percent_goal', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('ranking', models.IntegerField()),
                ('competition_start_date', models.DateField()),
                ('competition_winner', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'global_competitions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChallengeInventory',
            fields=[
                ('challenge_inventory_id', models.AutoField(primary_key=True, serialize=False)),
                ('challenge_start_date', models.DateField()),
                ('challenge_completion', models.DateField(blank=True, null=True)),
                ('challenge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.challenge')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'challenge_inventory',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='challenge',
            name='difficulty',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.difficulty'),
        ),
        migrations.AddField(
            model_name='challenge',
            name='item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.items'),
        ),
        migrations.CreateModel(
            name='Budget',
            fields=[
                ('budget_id', models.AutoField(primary_key=True, serialize=False)),
                ('projected_income', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('projected_expenses', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('additional_expenses_goal', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('savings_goal', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('savings_actual', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('expenses_actual', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('budget_percent_goal', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'budget',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='users',
            name='security_question',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.securityquestion'),
        ),
        migrations.CreateModel(
            name='Friends',
            fields=[
                ('friend_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_2_id', models.IntegerField()),
                ('friend_status', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='app.friendstatus')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'friends',
                'managed': True,
                'unique_together': {('user', 'user_2_id')},
            },
        ),
        migrations.CreateModel(
            name='Competitions',
            fields=[
                ('competition_id', models.AutoField(primary_key=True, serialize=False)),
                ('competition_type', models.CharField(blank=True, max_length=255, null=True)),
                ('user_2_id', models.IntegerField()),
                ('competition_start_date', models.DateField()),
                ('competition_winner', models.IntegerField(blank=True, null=True)),
                ('competition_status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.competitionstatus')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'competitions',
                'managed': True,
                'unique_together': {('user', 'user_2_id')},
            },
        ),
    ]
