# Generated by Django 3.2.7 on 2022-02-02 16:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('user_last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('user_user_name', models.CharField(max_length=255, unique=True)),
                ('user_email', models.CharField(max_length=255, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('user_phone_number', models.CharField(blank=True, max_length=14, null=True, unique=True)),
                ('user_registration_date', models.DateField()),
                ('user_birth_date', models.DateField()),
                ('user_has_notifications', models.BooleanField()),
                ('user_budget_goal_amount', models.IntegerField(blank=True, null=True)),
                ('user_experience_points', models.IntegerField(blank=True, null=True)),
                ('user_security_question_answer', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField()),
            ],
            options={
                'db_table': 'users',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('category_id', models.AutoField(primary_key=True, serialize=False)),
                ('category_name', models.CharField(max_length=255)),
                ('category_description', models.CharField(max_length=255)),
                ('category_is_income', models.BooleanField()),
            ],
            options={
                'db_table': 'category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('challenge_id', models.AutoField(primary_key=True, serialize=False)),
                ('challenge_name', models.CharField(max_length=255)),
                ('challenge_description', models.CharField(max_length=255)),
                ('challenge_type', models.CharField(max_length=255)),
                ('challenge_time_given', models.IntegerField()),
                ('challenge_is_repeatable', models.BooleanField()),
                ('challenge_is_active', models.BooleanField()),
                ('challenge_experience_points', models.IntegerField(blank=True, null=True)),
                ('challenge_start_ammount', models.IntegerField(blank=True, null=True)),
                ('challenge_completion_ammount', models.IntegerField(blank=True, null=True)),
                ('difficulty', models.IntegerField(blank=True, null=True)),
                ('experience_level_unlock', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'challenge',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChallengeTrigger',
            fields=[
                ('challenge_trigger_id', models.AutoField(primary_key=True, serialize=False)),
                ('challenge_trigger_name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'challenge_trigger',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('experience_id', models.AutoField(primary_key=True, serialize=False)),
                ('experience_level', models.IntegerField()),
                ('experience_title', models.CharField(max_length=255)),
                ('experience_point_threshold', models.IntegerField()),
            ],
            options={
                'db_table': 'experience',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('item_id', models.AutoField(primary_key=True, serialize=False)),
                ('item_name', models.CharField(max_length=255)),
                ('item_description', models.CharField(max_length=255)),
                ('item_type', models.CharField(max_length=255)),
                ('item_link', models.CharField(max_length=255)),
                ('difficulty', models.CharField(blank=True, max_length=255, null=True)),
                ('experience_level_unlock', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'item',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('notification_id', models.AutoField(primary_key=True, serialize=False)),
                ('notification_name', models.CharField(max_length=255)),
                ('notification_message', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'notification',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SecurityQuestion',
            fields=[
                ('security_question_id', models.AutoField(primary_key=True, serialize=False)),
                ('security_question_name', models.CharField(max_length=255)),
                ('security_question_question', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'security_question',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Widget',
            fields=[
                ('widget_id', models.AutoField(primary_key=True, serialize=False)),
                ('widget_name', models.CharField(max_length=255)),
                ('widget_description', models.CharField(max_length=255)),
                ('widget_link', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'widget',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserWidgetInventory',
            fields=[
                ('user_widget_inventory_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_widget_position', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('widget', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.widget')),
            ],
            options={
                'db_table': 'user_widget_inventory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserNotificationList',
            fields=[
                ('user_notification_list_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_notification_list_time', models.DateTimeField(blank=True, null=True)),
                ('notification', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.notification')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_notification_list',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserItemInventory',
            fields=[
                ('user_item_inventory_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_item_is_equipped', models.BooleanField()),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.item')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_item_inventory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserChallengeInventory',
            fields=[
                ('user_challenge_inventory_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_challenge_start_date', models.DateField()),
                ('user_challenge_completion_date', models.DateTimeField(blank=True, null=True)),
                ('user_challenge_current_amount', models.IntegerField(blank=True, null=True)),
                ('challenge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.challenge')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_challenge_inventory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('receipt_id', models.AutoField(primary_key=True, serialize=False)),
                ('receipt_date', models.DateTimeField()),
                ('receipt_is_reccuring', models.IntegerField()),
                ('receipt_is_income', models.BooleanField()),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'receipt',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Income',
            fields=[
                ('income_id', models.AutoField(primary_key=True, serialize=False)),
                ('income_name', models.CharField(max_length=255)),
                ('income_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.category')),
                ('receipt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.receipt')),
            ],
            options={
                'db_table': 'income',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GlobalCompetition',
            fields=[
                ('global_competition_id', models.AutoField(primary_key=True, serialize=False)),
                ('global_competition_type', models.CharField(blank=True, max_length=255, null=True)),
                ('budget_percent_goal', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('ranking', models.IntegerField()),
                ('competition_start_date', models.DateField()),
                ('competition_winner', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'global_competition',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('expense_id', models.AutoField(primary_key=True, serialize=False)),
                ('expense_name', models.CharField(max_length=255)),
                ('expense_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('expense_is_essential', models.BooleanField(blank=True, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.category')),
                ('receipt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.receipt')),
            ],
            options={
                'db_table': 'expense',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='challenge',
            name='challenge_trigger',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.challengetrigger'),
        ),
        migrations.AddField(
            model_name='challenge',
            name='item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.item'),
        ),
        migrations.AddField(
            model_name='users',
            name='security_question',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.securityquestion'),
        ),
        migrations.CreateModel(
            name='UserCategoryBudget',
            fields=[
                ('user_category_budget_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_category_budget_estimated_amount', models.IntegerField(blank=True, null=True)),
                ('user_category_budget_altered_amount', models.IntegerField(blank=True, null=True)),
                ('user_category_budget_last_modified_date', models.DateTimeField(blank=True, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.category')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_category_budget',
                'managed': True,
                'unique_together': {('user', 'category')},
            },
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('friend_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_2_id', models.IntegerField()),
                ('friend_status_type', models.CharField(max_length=20)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'friend',
                'managed': True,
                'unique_together': {('user', 'user_2_id')},
            },
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('competition_id', models.AutoField(primary_key=True, serialize=False)),
                ('competition_type', models.CharField(blank=True, max_length=255, null=True)),
                ('user_2_id', models.IntegerField()),
                ('competition_status_type', models.CharField(max_length=20)),
                ('competition_start_date', models.DateField()),
                ('competition_winner', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'competition',
                'managed': True,
                'unique_together': {('user', 'user_2_id')},
            },
        ),
    ]
