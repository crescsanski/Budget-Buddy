/* RUNNING THIS FILES DELETES ALL TABLES AND REINSTERTS THEM */
/* THEN IT CREATES PROCEDURES AND CALLS THEM TO FILL TABLES */


/* Drop All Tables and views in Database */
CREATE OR REPLACE PROCEDURE budgetbuddy.drop_all_tables()
LANGUAGE SQL
AS $$
DROP TABLE IF EXISTS budgetBuddy.authtoken_token;
DROP TABLE IF EXISTS budgetBuddy.auth_group_permissions;
DROP TABLE IF EXISTS budgetBuddy.auth_group;
DROP TABLE IF EXISTS budgetBuddy.auth_permission;
DROP TABLE IF EXISTS budgetBuddy.django_admin_log;
DROP TABLE IF EXISTS budgetBuddy.django_content_type;
DROP TABLE IF EXISTS budgetBuddy.django_migrations;
DROP TABLE IF EXISTS budgetBuddy.django_session;
DROP TABLE IF EXISTS budgetBuddy.global_competition;
DROP TABLE IF EXISTS budgetBuddy.competition;
DROP TABLE IF EXISTS budgetBuddy.friend;
DROP TABLE IF EXISTS budgetBuddy.user_widget_inventory;
DROP TABLE IF EXISTS budgetBuddy.widget;
DROP TABLE IF EXISTS budgetBuddy.user_notification_list;
DROP TABLE IF EXISTS budgetBuddy.notification;
DROP TABLE IF EXISTS budgetBuddy.user_category_budget;
DROP TABLE IF EXISTS budgetBuddy.income;
DROP TABLE IF EXISTS budgetBuddy.expense;
DROP TABLE IF EXISTS budgetBuddy.category;
DROP TABLE IF EXISTS budgetBuddy.receipt;
DROP TABLE IF EXISTS budgetBuddy.experience;
DROP TABLE IF EXISTS budgetBuddy.user_challenge_inventory;
DROP TABLE IF EXISTS budgetBuddy.challenge;
DROP TABLE IF EXISTS budgetBuddy.user_item_inventory;
DROP TABLE IF EXISTS budgetBuddy.item;
DROP TABLE IF EXISTS budgetBuddy.users;
DROP TABLE IF EXISTS budgetBuddy.security_question;
$$;


/* Drop All Tables in Database */
CALL budgetbuddy.drop_all_tables();


/* Create All Tables in Database */
CREATE OR REPLACE PROCEDURE budgetbuddy.create_all_tables()
LANGUAGE SQL
AS $$
CREATE TABLE IF NOT EXISTS budgetBuddy.security_question(
	security_question_id SERIAL,
    	security_question_name VARCHAR(255) NOT NULL,
	security_question_question VARCHAR(255) NOT NULL,
	PRIMARY KEY (security_question_id) 
);
CREATE TABLE IF NOT EXISTS budgetBuddy.users(
	user_id SERIAL,
	user_first_name VARCHAR(255),
	user_last_name VARCHAR(255),
	user_user_name VARCHAR(255) UNIQUE NOT NULL,
	user_email VARCHAR(255) UNIQUE NOT NULL,
	password VARCHAR(255) NOT NULL,	
	user_phone_number VARCHAR(14) UNIQUE,
	user_registration_date DATE NOT NULL,	
	user_birth_date DATE NOT NULL,
	user_has_notifications BOOLEAN NOT NULL,	
	user_current_experience_points INT,
	user_required_experience_points INT,
	user_level INT,
	security_question_id INT,
	user_security_question_answer VARCHAR(255) NOT NULL,
	is_active BOOLEAN,
    	is_admin BOOLEAN,
    	last_login TIMESTAMP WITH TIME ZONE,
	user_total_logins INT,
	user_login_array INTEGER[],
	user_auto_renewal BOOLEAN,	
	user_independent BOOLEAN,
	user_retired BOOLEAN,
	user_married BOOLEAN,
	user_multiple_incomes BOOLEAN,
	user_children BOOLEAN,
	user_city BOOLEAN,
	user_pet BOOLEAN,
	user_gets_tax_refund BOOLEAN,
	user_recommendation_consent BOOLEAN,	
	PRIMARY KEY (user_id),
	CONSTRAINT fk_userssecurityquestion FOREIGN KEY(security_question_id) REFERENCES budgetBuddy.security_question(security_question_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.item(
	item_id SERIAL,
	item_name VARCHAR(255) NOT NULL,
	item_description VARCHAR(255) NOT NULL,
	item_type VARCHAR(255) NOT NULL,	
	item_link VARCHAR(255) NOT NULL,
	difficulty VARCHAR(255),
	experience_level_unlock INT,		
	PRIMARY KEY (item_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.user_item_inventory(
	user_item_inventory_id SERIAL,
	user_item_is_equipped BOOLEAN NOT NULL,
	item_id INT NOT NULL,
	user_id INT NOT NULL,
	PRIMARY KEY (user_item_inventory_id),
	CONSTRAINT fk_useriteminventoryitem FOREIGN KEY(item_id) REFERENCES budgetBuddy.item(item_id),
	CONSTRAINT fk_useriteminventoryuser FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id)	
);
CREATE TABLE IF NOT EXISTS budgetBuddy.challenge(
	challenge_id SERIAL,
    	challenge_name VARCHAR(255) NOT NULL,
	challenge_description VARCHAR(255) NOT NULL,
	challenge_type VARCHAR(255) NOT NULL,		
	challenge_time_given INT NOT NULL,
	challenge_is_repeatable BOOLEAN NOT NULL,
	challenge_is_active BOOLEAN NOT NULL,
	challenge_experience_points INT,
	challenge_start_amount INT,
	challenge_completion_amount INT,		
	item_id INT,	
	difficulty INT,
	challenge_trigger VARCHAR(255) NOT NULL,
	experience_level_unlock INT,	
	PRIMARY KEY (challenge_id),
	CONSTRAINT fk_challengeitem FOREIGN KEY(item_id) REFERENCES budgetBuddy.item(item_id)	
);
CREATE TABLE IF NOT EXISTS budgetBuddy.user_challenge_inventory(
	user_challenge_inventory_id SERIAL,	
	user_challenge_start_date DATE NOT NULL,
	user_challenge_completion_date TIMESTAMP,
	user_challenge_current_amount INT,
	challenge_id INT,	
	user_id INT,
	PRIMARY KEY (user_challenge_inventory_id),
	CONSTRAINT fk_userchallengeinventorychallenge FOREIGN KEY(challenge_id) REFERENCES budgetBuddy.challenge(challenge_id),
	CONSTRAINT fk_userchallengeinventoryuser FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.experience(
	experience_id SERIAL,	
	experience_level INT NOT NULL,
	experience_title VARCHAR(255) NOT NULL,
	experience_point_threshold INT NOT NULL,	
	PRIMARY KEY (experience_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.receipt(
	receipt_id SERIAL,
	receipt_date TIMESTAMP NOT NULL,		
	receipt_is_reccuring INT NOT NULL,
	receipt_is_income BOOLEAN NOT NULL,
	user_id INT,
	receipt_name VARCHAR(255),
	PRIMARY KEY (receipt_id),
	CONSTRAINT fk_receiptusers FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.category(
	category_id SERIAL,
    	category_name VARCHAR(255) NOT NULL,	
	category_description VARCHAR(255) NOT NULL,
	category_type VARCHAR(255) NOT NULL,
	PRIMARY KEY (category_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.expense(
	expense_id SERIAL,
    	expense_name VARCHAR(255) NOT NULL,
	expense_price DECIMAL(10,2) NOT NULL,
	receipt_id INT,
	category_id INT,	
	PRIMARY KEY (expense_id),	
	CONSTRAINT fk_expensereceipt FOREIGN KEY(receipt_id) REFERENCES budgetBuddy.receipt(receipt_id),
	CONSTRAINT fk_expensecategory FOREIGN KEY(category_id) REFERENCES budgetBuddy.category(category_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.income(
	income_id SERIAL,
	income_name VARCHAR(255) NOT NULL,
    	income_amount DECIMAL(10,2) NOT NULL,
	receipt_id INT,
	category_id INT,
	PRIMARY KEY (income_id),
	CONSTRAINT fk_incomereceipt FOREIGN KEY(receipt_id) REFERENCES budgetBuddy.receipt(receipt_id),
	CONSTRAINT fk_incomecategory FOREIGN KEY(category_id) REFERENCES budgetBuddy.category(category_id)		
);
CREATE TABLE IF NOT EXISTS budgetBuddy.user_category_budget(	
	user_category_budget_id SERIAL,
	user_id INT,	
	category_id INT,
	user_category_budget_estimated_amount INT,
	user_category_budget_altered_amount INT,
	user_category_budget_last_modified_date TIMESTAMP,
	user_category_budget_date TIMESTAMP,
	user_category_budget_favorite BOOLEAN,				
	PRIMARY KEY (user_category_budget_id),		
	CONSTRAINT fk_usercategorybudgetuser FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id),
	CONSTRAINT fk_usercategorybudgetcategory FOREIGN KEY(category_id) REFERENCES budgetBuddy.category(category_id)		
);
CREATE TABLE IF NOT EXISTS budgetBuddy.notification(
	notification_id SERIAL,
   	notification_name VARCHAR(255) NOT NULL,
	notification_message VARCHAR(255) NOT NULL,
	PRIMARY KEY (notification_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.user_notification_list(
	user_notification_list_id SERIAL,    		
	user_notification_list_time TIMESTAMP,
	user_id INT,
	notification_id INT,
	PRIMARY KEY (user_notification_list_id),
	CONSTRAINT fk_usernotificationlistuser FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id),
	CONSTRAINT fk_usernotificationlistnotification FOREIGN KEY(notification_id) REFERENCES budgetBuddy.notification(notification_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.widget(
	widget_id SERIAL,
   	widget_name VARCHAR(255) NOT NULL,
	widget_description VARCHAR(255) NOT NULL, 
	widget_link VARCHAR(255) NOT NULL,
	PRIMARY KEY (widget_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.user_widget_inventory(
	user_widget_inventory_id SERIAL,
	user_widget_position INT,
	widget_id INT,
	user_id INT,
	PRIMARY KEY (user_widget_inventory_id),
	CONSTRAINT fk_widgetinventorywidget FOREIGN KEY(widget_id) REFERENCES budgetBuddy.widget(widget_id),
	CONSTRAINT fk_widgetinventoryusers FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.friend(
	friend_id SERIAL,	
	user_2_id INT NOT NULL,
	user_id INT,
	friend_status_type VARCHAR(20) NOT NULL,	
	PRIMARY KEY (friend_id),
	CONSTRAINT fk_frienduser FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id),
	CONSTRAINT uq_friendsonce UNIQUE(user_id, user_2_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.competition(
	competition_id SERIAL,
	competition_type VARCHAR (255),	
	user_2_id INT NOT NULL,
	competition_status_type VARCHAR(20) NOT NULL,
	competition_start_date DATE NOT NULL,	
	competition_winner INT,	
	user_id INT,	
	PRIMARY KEY (competition_id),
	CONSTRAINT fk_competitionsusers FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id),
	CONSTRAINT uq_competitionsonce UNIQUE(user_id, user_2_id)
);
CREATE TABLE IF NOT EXISTS budgetBuddy.global_competition(
	global_competition_id SERIAL,
	global_competition_type VARCHAR(255),	
	budget_percent_goal DECIMAL(10,2),
	ranking INT NOT NULL,
	competition_start_date DATE NOT NULL,
	competition_winner INT,
	user_id INT,
	PRIMARY KEY (global_competition_id),
	CONSTRAINT fk_globalcompetitionsusers FOREIGN KEY(user_id) REFERENCES budgetBuddy.users(user_id)
);
CREATE TABLE IF NOT EXISTS budgetbuddy.django_session(
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL,
    CONSTRAINT django_session_pkey PRIMARY KEY (session_key)
);
CREATE TABLE IF NOT EXISTS budgetbuddy.django_migrations(
    id BIGSERIAL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL,
    CONSTRAINT django_migrations_pkey PRIMARY KEY (id)
);
CREATE TABLE IF NOT EXISTS budgetbuddy.django_content_type(
    id SERIAL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL,
    CONSTRAINT django_content_type_pkey PRIMARY KEY (id),
    CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model)
);
CREATE TABLE IF NOT EXISTS budgetbuddy.django_admin_log(
    id SERIAL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_pkey PRIMARY KEY (id),
    CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id)
        REFERENCES budgetbuddy.django_content_type (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT django_admin_log_user_id_c564eba6_fk_users_user_id FOREIGN KEY (user_id)
        REFERENCES budgetbuddy.users (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT django_admin_log_action_flag_check CHECK (action_flag >= 0)
);
CREATE TABLE IF NOT EXISTS budgetbuddy.auth_permission(
    id SERIAL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL,
    CONSTRAINT auth_permission_pkey PRIMARY KEY (id),
    CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename),
    CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id)
        REFERENCES budgetbuddy.django_content_type (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED
);
CREATE TABLE IF NOT EXISTS budgetbuddy.auth_group(
    id SERIAL,
    name character varying(150) NOT NULL,
    CONSTRAINT auth_group_pkey PRIMARY KEY (id),
    CONSTRAINT auth_group_name_key UNIQUE (name)
);
CREATE TABLE IF NOT EXISTS budgetbuddy.auth_group_permissions(
    id BIGSERIAL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL,
    CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id),
    CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id),
    CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id)
        REFERENCES budgetbuddy.auth_permission (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id)
        REFERENCES budgetbuddy.auth_group (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED
);
CREATE TABLE IF NOT EXISTS budgetbuddy.authtoken_token(
    key character varying(40) NOT NULL,
    created timestamp with time zone NOT NULL,
    user_id integer NOT NULL,
    CONSTRAINT authtoken_token_pkey PRIMARY KEY (key),
    CONSTRAINT authtoken_token_user_id_key UNIQUE (user_id),
    CONSTRAINT authtoken_token_user_id_35299eff_fk_users_user_id FOREIGN KEY (user_id)
        REFERENCES budgetbuddy.users (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED
);
$$;

/* Create All Tables in Database */
CALL budgetbuddy.create_all_tables();
